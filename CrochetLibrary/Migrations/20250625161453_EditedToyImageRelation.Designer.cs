// <auto-generated />
using System;
using CrochetLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrochetLibrary.Migrations
{
    [DbContext(typeof(CrochetDbContext))]
    [Migration("20250625161453_EditedToyImageRelation")]
    partial class EditedToyImageRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ToyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ToyId", "DisplayOrder");

                    b.ToTable("ToyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60704c6b-e5d6-407d-9776-01ed220e6353"),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/teddy-bear-1.jpg",
                            ToyId = new Guid("f7ca06fa-3485-4589-bff5-ceab4b2cebcd")
                        },
                        new
                        {
                            Id = new Guid("153a73ed-ccf3-4ff3-ab93-2cff7e652f20"),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/teddy-bear-2.jpg",
                            ToyId = new Guid("f7ca06fa-3485-4589-bff5-ceab4b2cebcd")
                        },
                        new
                        {
                            Id = new Guid("f7234ffc-ba5a-4000-b530-dd876047a160"),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/teddy-bear-3.jpg",
                            ToyId = new Guid("f7ca06fa-3485-4589-bff5-ceab4b2cebcd")
                        },
                        new
                        {
                            Id = new Guid("8667a67a-1bf6-4602-93d2-3acf6ea1d6f5"),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/bunny-1.jpg",
                            ToyId = new Guid("c5fb3bb2-5862-4812-bd5a-c9f5d17752a3")
                        },
                        new
                        {
                            Id = new Guid("90111a3d-e177-4343-910a-75713d4a7213"),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/bunny-2.jpg",
                            ToyId = new Guid("c5fb3bb2-5862-4812-bd5a-c9f5d17752a3")
                        },
                        new
                        {
                            Id = new Guid("36a71d98-3fd3-4663-9cb3-b10be18c8d18"),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/bunny-3.jpg",
                            ToyId = new Guid("c5fb3bb2-5862-4812-bd5a-c9f5d17752a3")
                        },
                        new
                        {
                            Id = new Guid("b63f9227-0943-4219-84ed-faf020641848"),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/dinosaur-1.jpg",
                            ToyId = new Guid("491ce4e7-444d-4dc9-8178-35424232d3db")
                        },
                        new
                        {
                            Id = new Guid("70c6500c-7180-444d-b864-df0ee5bf648d"),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/dinosaur-2.jpg",
                            ToyId = new Guid("491ce4e7-444d-4dc9-8178-35424232d3db")
                        },
                        new
                        {
                            Id = new Guid("680359aa-9792-4d1e-82fd-63acf906e7bf"),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/dinosaur-3.jpg",
                            ToyId = new Guid("491ce4e7-444d-4dc9-8178-35424232d3db")
                        },
                        new
                        {
                            Id = new Guid("5ac778c2-08e6-43e4-a9a5-ae3b9f43dc95"),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/unicorn-1.jpg",
                            ToyId = new Guid("9e75471d-17ba-4665-a2a1-e2e008f061a0")
                        },
                        new
                        {
                            Id = new Guid("0d6e2126-1cce-48e6-aaab-46fd2b96ee3f"),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/unicorn-2.jpg",
                            ToyId = new Guid("9e75471d-17ba-4665-a2a1-e2e008f061a0")
                        },
                        new
                        {
                            Id = new Guid("de549612-a8bb-4665-8caf-a4314364fa82"),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/unicorn-3.jpg",
                            ToyId = new Guid("9e75471d-17ba-4665-a2a1-e2e008f061a0")
                        },
                        new
                        {
                            Id = new Guid("2a73d155-0a99-425b-9f9d-3cc993f34e2d"),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/octopus-1.jpg",
                            ToyId = new Guid("13ce91d0-e640-406d-9f1f-b08811390a04")
                        },
                        new
                        {
                            Id = new Guid("ab67b0ef-37bf-41c6-a29a-770883329b41"),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/octopus-2.jpg",
                            ToyId = new Guid("13ce91d0-e640-406d-9f1f-b08811390a04")
                        },
                        new
                        {
                            Id = new Guid("91c31f50-9eb9-4dad-b945-a5934b95eed6"),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/octopus-3.jpg",
                            ToyId = new Guid("13ce91d0-e640-406d-9f1f-b08811390a04")
                        });
                });

            modelBuilder.Entity("CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Toys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7ca06fa-3485-4589-bff5-ceab4b2cebcd"),
                            Colors = "Brown, Beige, Cream",
                            Description = "Soft and cuddly hand-crocheted teddy bear...",
                            Name = "Classic Teddy Bear",
                            Price = 24.989999999999998,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("c5fb3bb2-5862-4812-bd5a-c9f5d17752a3"),
                            Colors = "White, Pink, Lavender",
                            Description = "Adorable crochet bunny...",
                            Name = "Amigurumi Bunny",
                            Price = 29.5,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("491ce4e7-444d-4dc9-8178-35424232d3db"),
                            Colors = "Green, Blue, Orange",
                            Description = "Playful crochet dinosaur...",
                            Name = "Dinosaur Plushie",
                            Price = 26.75,
                            Stock = 18
                        },
                        new
                        {
                            Id = new Guid("9e75471d-17ba-4665-a2a1-e2e008f061a0"),
                            Colors = "White, Rainbow",
                            Description = "Magical hand-crocheted unicorn...",
                            Name = "Rainbow Unicorn",
                            Price = 34.990000000000002,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("13ce91d0-e640-406d-9f1f-b08811390a04"),
                            Colors = "Blue, Teal, Purple",
                            Description = "Soft, huggable octopus...",
                            Name = "Octopus Cuddle Buddy",
                            Price = 22.5,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.HasOne("Toy", "Toy")
                        .WithMany("Images")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

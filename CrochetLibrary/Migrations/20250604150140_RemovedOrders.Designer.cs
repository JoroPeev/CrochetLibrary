// <auto-generated />
using System;
using CrochetLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrochetLibrary.Migrations
{
    [DbContext(typeof(CrochetDbContext))]
    [Migration("20250604150140_RemovedOrders")]
    partial class RemovedOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrochetLibrary.Models.CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid>("ToyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ToyId", "DisplayOrder");

                    b.HasIndex("ToyId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("ToyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83a18731-0cfd-4de6-b321-b44876783645"),
                            AltText = "Classic Teddy Bear - Front View",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5370),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/teddy-bear-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("22c01b9b-3ed3-4d68-8e58-069e97bcd0b2")
                        },
                        new
                        {
                            Id = new Guid("6808b7c5-fb08-4fe3-a9df-aa6df7575cf5"),
                            AltText = "Classic Teddy Bear - Side View",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5383),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/teddy-bear-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("22c01b9b-3ed3-4d68-8e58-069e97bcd0b2")
                        },
                        new
                        {
                            Id = new Guid("154f65d5-e609-433d-96d3-f8790fdf20a0"),
                            AltText = "Classic Teddy Bear - Back View",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5386),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/teddy-bear-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("22c01b9b-3ed3-4d68-8e58-069e97bcd0b2")
                        },
                        new
                        {
                            Id = new Guid("4e409849-17ed-4c2d-8ca0-76a7d20f3403"),
                            AltText = "Amigurumi Bunny - With Dress",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5389),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/bunny-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("93eee0e7-e393-4544-9308-05318f300334")
                        },
                        new
                        {
                            Id = new Guid("a950714d-c2fc-4696-8356-2987f23c9e0f"),
                            AltText = "Amigurumi Bunny - Without Dress",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5393),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/bunny-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("93eee0e7-e393-4544-9308-05318f300334")
                        },
                        new
                        {
                            Id = new Guid("9bb1b6ec-3d16-4ed3-97e3-fa3bc714c567"),
                            AltText = "Amigurumi Bunny - Close-up Face",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5399),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/bunny-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("93eee0e7-e393-4544-9308-05318f300334")
                        },
                        new
                        {
                            Id = new Guid("1364f936-85fb-43e0-ab14-94914491e94d"),
                            AltText = "Dinosaur Plushie - Green Version",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5402),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/dinosaur-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("b15cb69e-bc9f-4b4d-a4e2-b5338c50c71d")
                        },
                        new
                        {
                            Id = new Guid("94da4e0a-aa9b-42c0-aeb7-1985624796a2"),
                            AltText = "Dinosaur Plushie - Blue Version",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5405),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/dinosaur-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("b15cb69e-bc9f-4b4d-a4e2-b5338c50c71d")
                        },
                        new
                        {
                            Id = new Guid("9aab5b2c-3b50-48a5-9333-3f2d75ba3fa0"),
                            AltText = "Dinosaur Plushie - Orange Version",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5408),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/dinosaur-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("b15cb69e-bc9f-4b4d-a4e2-b5338c50c71d")
                        },
                        new
                        {
                            Id = new Guid("66796c81-92aa-490b-b422-5570c65839ea"),
                            AltText = "Rainbow Unicorn - Full Body",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5413),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/unicorn-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("524511ca-4698-4736-a155-87704e92d52a")
                        },
                        new
                        {
                            Id = new Guid("51311247-3ab4-43d1-844a-959428ca0f01"),
                            AltText = "Rainbow Unicorn - Mane Detail",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5415),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/unicorn-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("524511ca-4698-4736-a155-87704e92d52a")
                        },
                        new
                        {
                            Id = new Guid("a012f2e0-6f1a-4cfb-84b9-19c8cbed7396"),
                            AltText = "Rainbow Unicorn - Horn Close-up",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5418),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/unicorn-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("524511ca-4698-4736-a155-87704e92d52a")
                        },
                        new
                        {
                            Id = new Guid("92d1bb0f-b200-4ee6-ad2b-cb6308d99b0c"),
                            AltText = "Octopus Cuddle Buddy - Full View",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5421),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/octopus-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("9bc72b77-74cc-4363-bb1b-1479ca08fdec")
                        },
                        new
                        {
                            Id = new Guid("45c924f8-99d4-492f-8b89-c0ab40a4fce0"),
                            AltText = "Octopus Cuddle Buddy - Tentacles Detail",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5426),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/octopus-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("9bc72b77-74cc-4363-bb1b-1479ca08fdec")
                        },
                        new
                        {
                            Id = new Guid("cda4c555-f032-4f98-82e5-7985f5bc3129"),
                            AltText = "Octopus Cuddle Buddy - Face Close-up",
                            CreatedAt = new DateTime(2025, 6, 4, 15, 1, 39, 230, DateTimeKind.Utc).AddTicks(5429),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/octopus-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("9bc72b77-74cc-4363-bb1b-1479ca08fdec")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Toys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22c01b9b-3ed3-4d68-8e58-069e97bcd0b2"),
                            Colors = "Brown, Beige, Cream",
                            Description = "Soft and cuddly hand-crocheted teddy bear...",
                            Name = "Classic Teddy Bear",
                            Price = 24.989999999999998,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("93eee0e7-e393-4544-9308-05318f300334"),
                            Colors = "White, Pink, Lavender",
                            Description = "Adorable crochet bunny...",
                            Name = "Amigurumi Bunny",
                            Price = 29.5,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("b15cb69e-bc9f-4b4d-a4e2-b5338c50c71d"),
                            Colors = "Green, Blue, Orange",
                            Description = "Playful crochet dinosaur...",
                            Name = "Dinosaur Plushie",
                            Price = 26.75,
                            Stock = 18
                        },
                        new
                        {
                            Id = new Guid("524511ca-4698-4736-a155-87704e92d52a"),
                            Colors = "White, Rainbow",
                            Description = "Magical hand-crocheted unicorn...",
                            Name = "Rainbow Unicorn",
                            Price = 34.990000000000002,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("9bc72b77-74cc-4363-bb1b-1479ca08fdec"),
                            Colors = "Blue, Teal, Purple",
                            Description = "Soft, huggable octopus...",
                            Name = "Octopus Cuddle Buddy",
                            Price = 22.5,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.HasOne("Toy", "Toy")
                        .WithMany("Images")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using CrochetLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrochetLibrary.Migrations
{
    [DbContext(typeof(CrochetDbContext))]
    [Migration("20250623151707_RemovedRelationInRequest")]
    partial class RemovedRelationInRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid>("ToyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ToyId", "DisplayOrder");

                    b.HasIndex("ToyId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("ToyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d621eb2a-544f-4ae5-82f8-bf9eadca96df"),
                            AltText = "Classic Teddy Bear - Front View",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6006),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/teddy-bear-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("2805d110-80f9-4a1c-93a2-1c74247e8743")
                        },
                        new
                        {
                            Id = new Guid("8dd69f92-32c5-4531-8249-fbbf795d8a07"),
                            AltText = "Classic Teddy Bear - Side View",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6022),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/teddy-bear-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("2805d110-80f9-4a1c-93a2-1c74247e8743")
                        },
                        new
                        {
                            Id = new Guid("e6b06d3b-6d8c-4b8e-bd97-230ef108bacd"),
                            AltText = "Classic Teddy Bear - Back View",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6025),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/teddy-bear-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("2805d110-80f9-4a1c-93a2-1c74247e8743")
                        },
                        new
                        {
                            Id = new Guid("0cbde2ff-a88a-474c-ab22-c95c1d797757"),
                            AltText = "Amigurumi Bunny - With Dress",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6028),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/bunny-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("667caae8-ae1f-4c43-b7ea-caa5f28ef782")
                        },
                        new
                        {
                            Id = new Guid("690f086a-5827-4bec-b081-0c61f3bec01d"),
                            AltText = "Amigurumi Bunny - Without Dress",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6030),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/bunny-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("667caae8-ae1f-4c43-b7ea-caa5f28ef782")
                        },
                        new
                        {
                            Id = new Guid("7882c634-c529-484a-b9b5-abdca328c39b"),
                            AltText = "Amigurumi Bunny - Close-up Face",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6036),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/bunny-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("667caae8-ae1f-4c43-b7ea-caa5f28ef782")
                        },
                        new
                        {
                            Id = new Guid("0bd11c15-296b-4d32-bad8-b00ffcadc9c7"),
                            AltText = "Dinosaur Plushie - Green Version",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6039),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/dinosaur-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("330988c9-9544-41b0-9036-33986fe97c56")
                        },
                        new
                        {
                            Id = new Guid("cc2c316d-9793-4650-a603-851c07de0247"),
                            AltText = "Dinosaur Plushie - Blue Version",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6041),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/dinosaur-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("330988c9-9544-41b0-9036-33986fe97c56")
                        },
                        new
                        {
                            Id = new Guid("c901cd8e-17f5-4f51-a696-06f8135c646b"),
                            AltText = "Dinosaur Plushie - Orange Version",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6044),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/dinosaur-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("330988c9-9544-41b0-9036-33986fe97c56")
                        },
                        new
                        {
                            Id = new Guid("91acb3c0-afa4-4931-a198-cbfe4c43d2a6"),
                            AltText = "Rainbow Unicorn - Full Body",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6049),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/unicorn-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("c7be4500-52df-47de-baff-4f8186745fa5")
                        },
                        new
                        {
                            Id = new Guid("07e69e97-24f8-40ef-9bb4-4fc70cbb752c"),
                            AltText = "Rainbow Unicorn - Mane Detail",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6052),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/unicorn-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("c7be4500-52df-47de-baff-4f8186745fa5")
                        },
                        new
                        {
                            Id = new Guid("ed19cab6-5146-4183-9164-9d0bb415c7cb"),
                            AltText = "Rainbow Unicorn - Horn Close-up",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6054),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/unicorn-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("c7be4500-52df-47de-baff-4f8186745fa5")
                        },
                        new
                        {
                            Id = new Guid("8e6082df-5c87-4510-a1ba-3415d22827d6"),
                            AltText = "Octopus Cuddle Buddy - Full View",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6057),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/octopus-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("79f2f51d-4048-404e-98f9-eb3897b4d18e")
                        },
                        new
                        {
                            Id = new Guid("a3b06a42-89d9-4c33-b2a5-582ac7cec9d4"),
                            AltText = "Octopus Cuddle Buddy - Tentacles Detail",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6062),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/octopus-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("79f2f51d-4048-404e-98f9-eb3897b4d18e")
                        },
                        new
                        {
                            Id = new Guid("4d5a89d0-ad7f-4791-b61d-cd91df02b7d6"),
                            AltText = "Octopus Cuddle Buddy - Face Close-up",
                            CreatedAt = new DateTime(2025, 6, 23, 15, 17, 6, 597, DateTimeKind.Utc).AddTicks(6065),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/octopus-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("79f2f51d-4048-404e-98f9-eb3897b4d18e")
                        });
                });

            modelBuilder.Entity("CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Toys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2805d110-80f9-4a1c-93a2-1c74247e8743"),
                            Colors = "Brown, Beige, Cream",
                            Description = "Soft and cuddly hand-crocheted teddy bear...",
                            Name = "Classic Teddy Bear",
                            Price = 24.989999999999998,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("667caae8-ae1f-4c43-b7ea-caa5f28ef782"),
                            Colors = "White, Pink, Lavender",
                            Description = "Adorable crochet bunny...",
                            Name = "Amigurumi Bunny",
                            Price = 29.5,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("330988c9-9544-41b0-9036-33986fe97c56"),
                            Colors = "Green, Blue, Orange",
                            Description = "Playful crochet dinosaur...",
                            Name = "Dinosaur Plushie",
                            Price = 26.75,
                            Stock = 18
                        },
                        new
                        {
                            Id = new Guid("c7be4500-52df-47de-baff-4f8186745fa5"),
                            Colors = "White, Rainbow",
                            Description = "Magical hand-crocheted unicorn...",
                            Name = "Rainbow Unicorn",
                            Price = 34.990000000000002,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("79f2f51d-4048-404e-98f9-eb3897b4d18e"),
                            Colors = "Blue, Teal, Purple",
                            Description = "Soft, huggable octopus...",
                            Name = "Octopus Cuddle Buddy",
                            Price = 22.5,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.HasOne("Toy", "Toy")
                        .WithMany("Images")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using CrochetLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrochetLibrary.Migrations
{
    [DbContext(typeof(CrochetDbContext))]
    [Migration("20250619151927_RequestModelFix")]
    partial class RequestModelFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid>("ToyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ToyId", "DisplayOrder");

                    b.HasIndex("ToyId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("ToyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4089cd30-dd3c-4bc5-b129-9932643781d7"),
                            AltText = "Classic Teddy Bear - Front View",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4067),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/teddy-bear-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("ce74948f-2b40-4b46-8a37-b455b6f5d39c")
                        },
                        new
                        {
                            Id = new Guid("aec81dda-d7a9-4899-91f2-8196a2117de2"),
                            AltText = "Classic Teddy Bear - Side View",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4075),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/teddy-bear-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("ce74948f-2b40-4b46-8a37-b455b6f5d39c")
                        },
                        new
                        {
                            Id = new Guid("c9d5436d-a3fe-4389-bcbf-c1e34d8168c2"),
                            AltText = "Classic Teddy Bear - Back View",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4085),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/teddy-bear-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("ce74948f-2b40-4b46-8a37-b455b6f5d39c")
                        },
                        new
                        {
                            Id = new Guid("f5ed5c0f-4420-4ffb-9673-d3d9f6c0ca4a"),
                            AltText = "Amigurumi Bunny - With Dress",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4088),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/bunny-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("d92f84f6-65b9-4eb6-98fe-057d65515846")
                        },
                        new
                        {
                            Id = new Guid("591627a4-4879-42c6-816a-48de32d68fce"),
                            AltText = "Amigurumi Bunny - Without Dress",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4091),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/bunny-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("d92f84f6-65b9-4eb6-98fe-057d65515846")
                        },
                        new
                        {
                            Id = new Guid("0e94003a-53fe-4533-8ea8-17f76edc18b5"),
                            AltText = "Amigurumi Bunny - Close-up Face",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4094),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/bunny-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("d92f84f6-65b9-4eb6-98fe-057d65515846")
                        },
                        new
                        {
                            Id = new Guid("2e6a6d21-d91a-484b-b37b-d70503572d2e"),
                            AltText = "Dinosaur Plushie - Green Version",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4100),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/dinosaur-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("f94e39e2-1c8b-487f-9ecf-9940a2e4f273")
                        },
                        new
                        {
                            Id = new Guid("3ac64125-7eec-4682-aae0-126c173e1797"),
                            AltText = "Dinosaur Plushie - Blue Version",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4103),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/dinosaur-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("f94e39e2-1c8b-487f-9ecf-9940a2e4f273")
                        },
                        new
                        {
                            Id = new Guid("721604c7-4e11-45f0-938a-182670425ebd"),
                            AltText = "Dinosaur Plushie - Orange Version",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4105),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/dinosaur-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("f94e39e2-1c8b-487f-9ecf-9940a2e4f273")
                        },
                        new
                        {
                            Id = new Guid("9a0dec0c-3a3a-4e5a-a0aa-e3b7e228f7e5"),
                            AltText = "Rainbow Unicorn - Full Body",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4108),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/unicorn-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("c230ca66-a6d7-4d62-8477-303aaddee9ec")
                        },
                        new
                        {
                            Id = new Guid("9dfdf529-d89a-4fa4-bc7c-bbab573989d3"),
                            AltText = "Rainbow Unicorn - Mane Detail",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4114),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/unicorn-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("c230ca66-a6d7-4d62-8477-303aaddee9ec")
                        },
                        new
                        {
                            Id = new Guid("fedb71d7-be33-4fab-abf0-394b28973790"),
                            AltText = "Rainbow Unicorn - Horn Close-up",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4116),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/unicorn-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("c230ca66-a6d7-4d62-8477-303aaddee9ec")
                        },
                        new
                        {
                            Id = new Guid("42b5f252-09e4-4a43-a0af-3a2315de340f"),
                            AltText = "Octopus Cuddle Buddy - Full View",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4119),
                            DisplayOrder = 1,
                            ImageUrl = "https://example.com/octopus-1.jpg",
                            IsPrimary = true,
                            ToyId = new Guid("dfca9479-fac6-4501-a3f4-1dce69130175")
                        },
                        new
                        {
                            Id = new Guid("1ee7283c-20b9-4fa4-875e-4a8b13e1db6c"),
                            AltText = "Octopus Cuddle Buddy - Tentacles Detail",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4122),
                            DisplayOrder = 2,
                            ImageUrl = "https://example.com/octopus-2.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("dfca9479-fac6-4501-a3f4-1dce69130175")
                        },
                        new
                        {
                            Id = new Guid("91921b8d-df13-4ea4-a41a-99b50ae7ac3b"),
                            AltText = "Octopus Cuddle Buddy - Face Close-up",
                            CreatedAt = new DateTime(2025, 6, 19, 15, 19, 27, 232, DateTimeKind.Utc).AddTicks(4127),
                            DisplayOrder = 3,
                            ImageUrl = "https://example.com/octopus-3.jpg",
                            IsPrimary = false,
                            ToyId = new Guid("dfca9479-fac6-4501-a3f4-1dce69130175")
                        });
                });

            modelBuilder.Entity("CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ToyId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Toys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce74948f-2b40-4b46-8a37-b455b6f5d39c"),
                            Colors = "Brown, Beige, Cream",
                            Description = "Soft and cuddly hand-crocheted teddy bear...",
                            Name = "Classic Teddy Bear",
                            Price = 24.989999999999998,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("d92f84f6-65b9-4eb6-98fe-057d65515846"),
                            Colors = "White, Pink, Lavender",
                            Description = "Adorable crochet bunny...",
                            Name = "Amigurumi Bunny",
                            Price = 29.5,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("f94e39e2-1c8b-487f-9ecf-9940a2e4f273"),
                            Colors = "Green, Blue, Orange",
                            Description = "Playful crochet dinosaur...",
                            Name = "Dinosaur Plushie",
                            Price = 26.75,
                            Stock = 18
                        },
                        new
                        {
                            Id = new Guid("c230ca66-a6d7-4d62-8477-303aaddee9ec"),
                            Colors = "White, Rainbow",
                            Description = "Magical hand-crocheted unicorn...",
                            Name = "Rainbow Unicorn",
                            Price = 34.990000000000002,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("dfca9479-fac6-4501-a3f4-1dce69130175"),
                            Colors = "Blue, Teal, Purple",
                            Description = "Soft, huggable octopus...",
                            Name = "Octopus Cuddle Buddy",
                            Price = 22.5,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("CrochetLibrary.Models.ToyImage", b =>
                {
                    b.HasOne("Toy", "Toy")
                        .WithMany("Images")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("CustomerRequest", b =>
                {
                    b.HasOne("Toy", "Toy")
                        .WithMany()
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Toy", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
